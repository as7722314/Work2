
@model Work2.Models.Order
@{
    ViewBag.Title = "Update";
    Layout = "~/Views/Shared/_Layout.cshtml";
}



<table>
    <tr>
        <td>@Html.LabelFor(model => model.OrderID)</td>
        <td>@Html.TextBoxFor(model => model.OrderID, new { Readonly = true, @class = "form-control" })</td>
        <td>@Html.ValidationMessageFor(m => m.OrderID)</td>
    </tr>
    <tr>
        <td>@Html.LabelFor(model => model.CustomerID)</td>
        <td>@Html.DropDownListFor(model => model.CustomerID, (List<SelectListItem>)ViewBag.customerlist)</td>

        <td>@Html.ValidationMessageFor(m => m.CustomerID)</td>
    </tr>
    <tr>
        <td>@Html.LabelFor(model => model.EmployeeID)</td>
        <td>@Html.DropDownListFor(model => model.EmployeeID, (List<SelectListItem>)ViewBag.employeelist)</td>
        <td>@Html.ValidationMessageFor(m => m.EmployeeID)</td>
    </tr>
    <tr>
        <td>@Html.LabelFor(model => model.OrderDate)</td>
        <td>@Html.TextBoxFor(model => model.OrderDate, new { Value = Model.OrderDate.HasValue ? Model.OrderDate.Value.ToString("yyyy-MM-dd") : "", type = "date", @class = "form-control" })</td>
        <td>@Html.ValidationMessageFor(m => m.OrderDate)</td>
    </tr>
    <tr>
        <td>@Html.LabelFor(model => model.RequiredDate)</td>
        <td>@Html.TextBoxFor(model => model.RequiredDate, new { Value = Model.RequiredDate.HasValue ? Model.RequiredDate.Value.ToString("yyyy-MM-dd") : "", type = "date", @class = "form-control" })</td>
        <td>@Html.ValidationMessageFor(m => m.RequiredDate)</td>
    </tr>
    <tr>
        <td>@Html.LabelFor(model => model.ShipperDate)</td>
        <td>@Html.TextBoxFor(model => model.ShipperDate, new { Value = Model.ShipperDate.HasValue ? Model.ShipperDate.Value.ToString("yyyy-MM-dd") : "", type = "date", @class = "form-control" })</td>
        <td>@Html.ValidationMessageFor(m => m.ShipperDate)</td>
    </tr>
    <tr>
        <td>@Html.LabelFor(model => model.ShipperID)</td>
        <td>@Html.DropDownListFor(model => model.ShipperID, (List<SelectListItem>)ViewBag.shipperslist)</td>
    </tr>
    <tr>
        <td>@Html.LabelFor(model => model.ShipName)</td>
        <td>@Html.DropDownListFor(model => model.ShipName, (List<SelectListItem>)ViewBag.shipperslist)</td>
    </tr>
    <tr>
        <td>@Html.LabelFor(model => model.Freight)</td>
        <td>@Html.TextBoxFor(model => model.Freight, new { @class = "form-control" })</td>
        <td>@Html.ValidationMessageFor(m => m.Freight)</td>
    </tr>
    <tr>
        <td>@Html.LabelFor(model => model.ShipCountry)</td>
        <td>@Html.TextBoxFor(model => model.ShipCountry, new { @class = "form-control" })</td>
        <td>@Html.ValidationMessageFor(m => m.ShipCountry)</td>
    </tr>
    <tr>
        <td>@Html.LabelFor(model => model.ShipCity)</td>
        <td>@Html.TextBoxFor(model => model.ShipCity, new { @class = "form-control" })</td>
        <td>@Html.ValidationMessageFor(m => m.ShipCity)</td>
    </tr>
    <tr>
        <td>@Html.LabelFor(model => model.ShipRegion)</td>
        <td>@Html.TextBoxFor(model => model.ShipRegion, new { @class = "form-control" })</td>
        <td>@Html.ValidationMessageFor(m => m.ShipRegion)</td>
    </tr>
    <tr>
        <td>@Html.LabelFor(model => model.CitShipPostalCodey)</td>
        <td>@Html.TextBoxFor(model => model.CitShipPostalCodey, new { @class = "form-control" })</td>
        <td>@Html.ValidationMessageFor(m => m.CitShipPostalCodey)</td>
    </tr>
    <tr>
        <td>@Html.LabelFor(model => model.ShipAddress)</td>
        <td>@Html.TextBoxFor(model => model.ShipAddress, new { @class = "form-control" })</td>
        <td>@Html.ValidationMessageFor(m => m.ShipAddress)</td>
    </tr>
</table>
<a class='k-button' id="save">存檔<span class='k-icon k-i-search'></span></a>
<a class='k-button' id="delete" href="">刪除本筆訂單</a>
<a class='k-button' href="/SelectOrder/Index">回查詢頁</a>

<div id="detailtable"></div>




<script type="text/javascript">
    
    $(document).ready(function () {
        var Orderdetail = @Html.Raw(Json.Encode(Model.OrderDetail));
        console.log(Orderdetail);
        var data = [];
        $.each(Orderdetail, function (id, a) {
            //console.log(a);
            data.push({
                'ProductID': a.ProductID,
                'UnitPrice': a.UnitPrice,
                'Qty': a.Qty,
                'Total': a.UnitPrice * a.Qty
            });
        });

        var dataSrc = new kendo.data.DataSource({
            schema: {
                model: {
                    fields: {
                        ProductID: {validation: {required: true} },
                        UnitPrice: { type: "number", editable: false},
                        Qty: { type: "number", validation: { required: true, min: 1 } },
                        Total: { type: "number", editable: false}
                    }
                }
            },
            aggregate:
                [
                    { field: "Total", aggregate: "Sum" }
                ],
            //change: GetPrice,
            pageSize: 10,
        });
        $("#detailtable").kendoGrid({
            dataSource: data,            
            pageable: true,
            scrollable: true,
            sortable: true,
            selectable: true,
            filterable: true,
            toolbar: ["create"],
            columns: [
                { field: "ProductID", title: "商品", editor: categoryDropDownEditor, template: "#=ProductID#" },
                { field: "UnitPrice", title: "單價" },
                { field: "Qty", title: "數量" },
                { field: "Total", title: "小計", template: "#=kendo.toString(UnitPrice*Qty,'C0')#", aggregates: ["Sum"], footerTemplate: "總計:" + "#=kendo.toString(Sum,'C0')#" },
                { command: "destroy", title: " " }],
            editable: true
        });
        function categoryDropDownEditor(container, options) {
            $('<input required name="' + options.field + '"/>').appendTo(container).kendoDropDownList({
                autoBind: false,
                dataTextField: "Text",
                dataValueField: "Value",
                dataSource: {
                    transport: {
                        read: {
                            type: "GET",
                            url: "/SelectOrder/InsertProduct",
                            dataType: "json"
                        }
                    }
                }
            });
        }

        
    });

</script>